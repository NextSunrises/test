<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j2使用说明：
使用方式如下：
private static final Logger logger = LogManager.getLogger(实际类名.class.getName());
2、日志说明：
（1）请根据实际情况配置各项参数
（2）需要注意日志文件备份数和日志文件大小，注意预留目录空间
（3）实际部署的时候backupFilePatch变量需要修改成linux目录
 -->
<!--monitorInterval是用来设置配置文件的动态加载时间,30表示每30秒配置文件会动态加载一次
可以再不重启应用的情况下修改配置
STATUS 该属性表示log4j2本身的日志信息打印级别,OFF表示关闭自身输出,若设置为TRACE,可以看到
控制台会打印一堆log4j加载插件,组装logger等调试信息-->
<configuration status="OFF" monitorInterval="30">
    <!--日志级别LEVEL从低到高分为TRACE->DEBUG->INFO->WARN->ERROR->FATAL -->
    <properties>
        <property name="LOG_HOME">E:/logs/</property>
        <property name="FILE_NAME">test</property>
    </properties>
    <!--先定义所有的appender-->
    <!--appender 可以理解为日志的输出目的地,console即为输出到控制台-->
    <!--Console节点中的PatternLayout定义了输出日志时的格式-->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!--这个都知道是输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
        </Console>
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--RollingRandomAccessFile Appender相比RollingFileAppender有很大的性能提升，
            官网宣称是20-200%,满足一定条件后,就重命名原日志文件用于备份,并重新生成一个新的
            日志文件,-->
        <!--fileName  指定当前日志文件的位置和文件名称-->
        <!--filePattern  指定当发生Rolling时，文件的转移和重命名规则-->
        <!--SizeBasedTriggeringPolicy  指定当文件体积大于size指定的值时，触发Rolling-->
        <!--DefaultRolloverStrategy  指定最多保存的文件个数-->
        <!--TimeBasedTriggeringPolicy  这个配置需要和filePattern结合使用，
        注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，
        最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，
        结合起来就是每1分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，
        则每一个小时生成一个文件。
        按照小时或者分钟或者天滚动直接该filePattern最后的单位即可
        yyyy-MM-dd HH-mm  按分钟滚动-->
        <RollingRandomAccessFile name="rollingFile" fileName="${LOG_HOME}/${FILE_NAME}.log"
                                 immediateFlush="true"
            filePattern="${LOG_HOME}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd HH}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36}.%M@%L - %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="20MB" />
            </Policies>
            <!-- 表示日志文件.gz的压缩包最大保留数 -->
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--additivity=false表示在该logger中输出的日志不会再延伸到父层logger,
        为true则会延伸到Root Logger,遵循Root Logger的配置再输出一次-->
        <!--<logger name="log4j.logger.org.mybatis" level="debug" additivity="true">
            <AppenderRef ref="rollingFile" />
        </logger>-->
        <!--在此出定义的日志级别,只有代码中高于或等于此级别才会打印出日志-->
        <!--设置为debug时会打印Mybatis sql日志-->
        <Root  level="all">
            <AppenderRef ref="console"  level="debug"/>
            <AppenderRef ref="rollingFile" level="debug" />
        </Root>
    </loggers>
</configuration>